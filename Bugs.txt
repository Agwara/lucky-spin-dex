// This works
    try {
      const recipientCountBigInt = BigInt(parseInt(count, 10)); // <-- CORRECT
      const creatorAmountBigInt = parseEther(creatorAmount);
      const userAmountBigInt = parseEther(userAmount);

      const hash = await writeContractAsync({
        address: CONTRACT_ADDRESSES.GIFT_CONTRACT,
        abi: GIFT_CONTRACT_ABI,
        functionName: "updateGiftSettings",
        args: [recipientCountBigInt, creatorAmountBigInt, userAmountBigInt],
        account: address,
        chain: chain,
      });
      // Wait for the transaction to be mined
      await waitForTransactionReceipt(config, { hash });
      toast.success("Update gift settings transaction successful!");
    } catch (error: any) {
      console.log("error: ", error);
      toast.error(
        `Update gift settings failed: ${error.shortMessage || error.message}`
      );
      throw error;
    }


// This does not work

    try {
      const recipientCountBigInt = BigInt(parseInt(count, 10)); // <-- CORRECT
      const creatorAmountBigInt = parseEther(creatorAmount);
      const userAmountBigInt = parseEther(userAmount);

      const hash = await writeContractAsync({
        address: CONTRACT_ADDRESSES.ADMIN_CONTRACT,
        abi: ADMIN_CONTRACT_ABI,
        functionName: "updateGiftSettings",
        args: [recipientCountBigInt, creatorAmountBigInt, userAmountBigInt],
        account: address,
        chain: chain,
      });
      // Wait for the transaction to be mined
      await waitForTransactionReceipt(config, { hash });
      toast.success("Update gift settings transaction successful!");
    } catch (error: any) {
      console.log("error: ", error);
      toast.error(
        `Update gift settings failed: ${error.shortMessage || error.message}`
      );
      throw error;
    }